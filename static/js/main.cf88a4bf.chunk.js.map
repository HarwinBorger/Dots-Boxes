{"version":3,"sources":["config/config.js","components/Svg.js","utils/utils.js","enums/enums.js","App.js","serviceWorker.js","index.js"],"names":["Dot","props","size","default","hover","state","radius","onClick","this","onMouseEnter","setState","onMouseLeave","className","modifier","cx","cy","r","stroke","strokeWidth","fill","currentColor","React","Component","LineGroup","x1","y1","x2","y2","color","MouseLine","id","strokeLinecap","Tale","x","y","width","height","dominantBaseline","textAnchor","number","Player","currentPlayer","strokeDasharray","score","name","Winner","player","transform","offset","Utils","calcTileNumber","getLinePositions","tl","tr","bl","br","getPossibleOptions","lines","dots","optionLines","_","filter","line","pos","optionDots","dot","option","length","map","enums","equal","App","restartGame","initialState","generateTileData","tileData","config","tileNumber","utils","generateLineData","lineData","baseNumber","tileAbove","tileBelow","tiles","tileLeft","tileRight","generateDotData","drawLine","box","game","mx","mouseLine","my","options","match","setLine","first","success","forEach","includes","setBox","switchPlayer","isFinish","getLineColor","players","getBoxColor","getCurrentPlayerColor","handleMouseMove","e","point","svg","createSVGPoint","clientX","clientY","mouse","matrixTransform","getScreenCTM","inverse","getDotOptionClass","getPlayerScore","tale","isCurrentPlayer","playerTiles","winner","getWinner","squares","tile","key","viewportOffsetX","viewportOffsetY","viewportWidth","viewportHeight","viewBox","onMouseMove","ref","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cf88a4bf.chunk.js","sourcesContent":["export default {\n\toffsetX: -200,\n\toffsetY: -50,\n\twidth: 5,\n\theight: 4,\n\tsize: 100\n};","import React from \"react\";\n\n/**\n * Dot class\n */\nexport class Dot extends React.Component {\n\tsize = {\n\t\tdefault: 10,\n\t\thover: 20\n\t};\n\n\tconstructor(props)\n\t{\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tradius: this.size.default\n\t\t}\n\t}\n\n\trender()\n\t{\n\t\treturn (\n\t\t\t<circle onClick={this.props.onClick} onMouseEnter={() => this.setState({radius: this.size.hover})}\n\t\t\t        onMouseLeave={() => this.setState({radius: this.size.default})}\n\t\t\t        className={`box__dot box__dot--${this.props.modifier}`} cx={this.props.cx} cy={this.props.cy}\n\t\t\t        r={this.state.radius} stroke=\"black\"\n\t\t\t        strokeWidth=\"3\" fill={this.props.currentColor}/>)\n\t}\n}\n\n\n/**\n * Linen Group\n * @param props\n * @returns {*}\n * @constructor\n */\nexport const LineGroup = (props) => {\n\treturn (\n\t\t<line className=\"box__line\" x1={props.x1} y1={props.y1} x2={props.x2} y2={props.y2} stroke={props.color}/>\n\t);\n};\n\n/**\n * Mouse line\n */\nexport const MouseLine = (props) => {\n\n\tif (props.id === false) {\n\t\treturn (null);\n\t}\n\n\treturn (\n\t\t<line className=\"box__mouseline\"\n\t\t      x1={props.x1}\n\t\t      y1={props.y1}\n\t\t      x2={props.x2}\n\t\t      y2={props.y2}\n\t\t      stroke={props.currentColor}\n\t\t      strokeWidth=\"8\" strokeLinecap={\"round\"}/>\n\t)\n};\n\n/**\n *\n * @param props\n * @returns {*}\n * @constructor\n */\nexport const Tale = (props) => {\n\treturn (\n\t\t<g>\n\t\t\t<rect className=\"box__tile\" x={props.x}\n\t\t\t      y={props.y} width={props.size} height={props.size}\n\t\t\t      fill={props.fill} stroke={\"#222\"} strokeWidth={\"12\"}/>\n\t\t\t<text className=\"box__number\" x={props.x + props.size / 2}\n\t\t\t      y={props.y + props.size / 2} dominantBaseline=\"middle\" textAnchor=\"middle\"\n\t\t\t      fill=\"black\">{props.number + 1}</text>\n\t\t</g>\n\t)\n};\n\n/**\n * Player stats\n * @param props\n * @returns {*}\n * @constructor\n */\nexport const Player = (props) => {\n\treturn (\n\t\t<g className={\"players__player player \" + (props.currentPlayer ? 'player--current' : '')}>\n\t\t\t<circle className={\"player__circle\"} cx={props.cx} cy={-50} fill=\"#48443C\" r={\"50\"}\n\t\t\t        strokeDasharray={157 / props.score} stroke={(props.currentPlayer ? '#FEDC7C' : props.fill)}/>\n\t\t\t<text className=\"player__score\" x={props.cx}\n\t\t\t      y={-45} dominantBaseline=\"middle\" textAnchor=\"middle\"\n\t\t\t      fill={props.fill}>{props.score}</text>\n\t\t\t<text className=\"player__name\" x={props.cx}\n\t\t\t      y={25} dominantBaseline=\"middle\" textAnchor=\"middle\"\n\t\t\t      fill=\"black\">{props.name}</text>\n\t\t</g>\n\t);\n};\n\nexport const Winner = (props) => {\n\tif (props.player === false) {\n\t\treturn (null);\n\t}\n\n\treturn (\n\t\t<g className={\"winner\"} transform={`translate(${props.offset},0)`} onClick={props.onClick}>\n\t\t\t<rect className=\"winner__rect\" x=\"-400\" width=\"400\" height=\"100\"\n\t\t\t      fill={\"black\"}/>\n\t\t\t<text className={\"winner__text\"} x={`-${props.offset / 2}`} y=\"50\" dominantBaseline=\"middle\"\n\t\t\t      textAnchor=\"middle\">{props.player}</text>\n\t\t</g>\n\t)\n};","import _ from \"lodash\";\n\nexport default class Utils {\n\t/**\n\t * Calc tile number\n\t * @param x\n\t * @param y\n\t * @param width\n\t * @returns {*}\n\t */\n\tstatic calcTileNumber = (x,y, width) =>{\n\t\treturn (width * y) + x;\n\t};\n\n\t/**\n\t * Get line position\n\t * @param x\n\t * @param y\n\t * @param size\n\t * @returns {{br: {x: number, y: number}, tl: {x: number, y: number}, bl: {x: number, y: number}, tr: {x: number, y: number}}}\n\t */\n\tstatic getLinePositions = (x, y, size) => {\n\t\treturn {\n\t\t\t// top left\n\t\t\ttl: {\n\t\t\t\tx: x * size,\n\t\t\t\ty: y * size\n\t\t\t},\n\t\t\t// top right\n\t\t\ttr: {\n\t\t\t\tx: (x + 1) * size,\n\t\t\t\ty: y * size\n\t\t\t},\n\t\t\t// bottom left\n\t\t\tbl: {\n\t\t\t\tx: (x) * size,\n\t\t\t\ty: (y + 1) * size\n\t\t\t},\n\t\t\t// bottom right (not needed atm)\n\t\t\tbr: {\n\t\t\t\tx: (x + 1) * size,\n\t\t\t\ty: (y + 1) * size\n\t\t\t}\n\t\t};\n\t};\n\n\t/**\n\t * get Possible Options\n\t * @description function to retrieve connected dots to lines based on coordinates\n\t * @param lines\n\t * @param dots\n\t * @param x\n\t * @param y\n\t * @returns {Array}\n\t */\n\tstatic getPossibleOptions = (lines, dots, x, y) => {\n\t\tlet optionLines = _.filter(lines, function (line) {\n\t\t\treturn (\n\t\t\t\t((line.pos.x1 === x && line.pos.y1 === y) || (line.pos.x2 === x && line.pos.y2 === y)) &&\n\t\t\t\t(line.player === false)\n\t\t\t)\n\t\t});\n\n\t\tlet optionDots = _.filter(dots, function (dot) {\n\t\t\tlet optionMatch = _.filter(optionLines, function (option) {\n\t\t\t\treturn (option.pos.x1 === dot.pos.x && option.pos.y1 === dot.pos.y) || (option.pos.x2 === dot.pos.x && option.pos.y2 === dot.pos.y)\n\t\t\t});\n\n\t\t\treturn optionMatch.length;\n\t\t});\n\n\t\treturn _.map(optionDots, 'id');\n\t}\n}","export default class enums {\n\tequal = 'equal'\n}","import React from 'react';\nimport _ from 'lodash';\n\n// Configs\nimport config from './config/config';\n// Components\nimport {LineGroup, Dot, MouseLine, Player, Tale, Winner} from './components/Svg';\n// Utilities\nimport utils from './utils/utils';\n// Enums\nimport enums from './enums/enums';\n\n/**\n * Box game\n */\nclass App extends React.Component {\n\n\tconstructor()\n\t{\n\t\tsuper();\n\n\t\tthis.state = this.initialState;\n\t}\n\n\tget initialState() {\n\t\t// Todo use Redux to store data on a more centralize location so we can split up all functions to improve readability of code\n\t\t// Todo or use NodeJS to store data on a server to play the game over different clients\n\t\treturn  {\n\t\t\t// game data\n\t\t\tgame: {\n\t\t\t\tcurrentPlayer: 0,\n\t\t\t\tmouseLine: {\n\t\t\t\t\tid: false,\n\t\t\t\t\tx: 0,\n\t\t\t\t\ty: 0,\n\t\t\t\t\toptions: false\n\t\t\t\t},\n\t\t\t\tmouse: {\n\t\t\t\t\tx: false,\n\t\t\t\t\ty: false,\n\t\t\t\t},\n\t\t\t\twinner: false,\n\t\t\t},\n\t\t\t// player data\n\t\t\tplayers: [\n\t\t\t\t{\n\t\t\t\t\tname: 'Albert Einstein',\n\t\t\t\t\tcolor: '#E0474C'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'Leonardo da Vinci',\n\t\t\t\t\tcolor: '#72A6CA'\n\t\t\t\t}\n\t\t\t],\n\t\t\t// data to draw the game\n\t\t\t// todo create a super function so we don't need to loop 3 times over the columns and rows\n\t\t\tbox: {\n\t\t\t\ttiles: this.generateTileData(),\n\t\t\t\tlines: this.generateLineData(),\n\t\t\t\tdots: this.generateDotData(),\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * Restart Game\n\t */\n\trestartGame = () =>{\n\t\tthis.setState(this.initialState);\n\t};\n\n\t/**\n\t * Generate Tile Data\n\t * @returns {Array}\n\t */\n\tgenerateTileData = () => {\n\t\tlet tileData = [];\n\n\t\tfor (let y = 0; y < config.height; y++) {\n\t\t\tfor (let x = 0; x < config.width; x++) {\n\t\t\t\tconst tileNumber = utils.calcTileNumber(x, y, config.width);\n\t\t\t\ttileData[tileNumber] = {\n\t\t\t\t\tpos: {\n\t\t\t\t\t\tx: x,\n\t\t\t\t\t\ty: y\n\t\t\t\t\t},\n\t\t\t\t\tplayer: false,\n\t\t\t\t\tnumber: tileNumber,\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\treturn tileData;\n\t};\n\n\t/**\n\t * Generate Line Data\n\t */\n\tgenerateLineData = () => {\n\t\tlet lineData = [];\n\t\tlet id = 0;\n\n\t\tfor (let y = 0; y <= config.height; y++) {\n\t\t\tfor (let x = 0; x <= config.width; x++) {\n\n\t\t\t\tconst pos = utils.getLinePositions(x, y, config.size);\n\t\t\t\tconst baseNumber = utils.calcTileNumber(x, y, config.width);\n\n\t\t\t\t// Todo horizontal and vertical use exact same script, should be put into function to centralize functionality\n\t\t\t\t// Horizontal line\n\t\t\t\tif (x < config.width) {\n\n\t\t\t\t\tconst tileAbove = y > 0 ? baseNumber - config.width : false; // if not most top line\n\t\t\t\t\tconst tileBelow = y < config.height ? baseNumber : false; // if not most bottom line\n\n\t\t\t\t\tlineData[id] = {\n\t\t\t\t\t\tid: id,\n\t\t\t\t\t\tpos: {\n\t\t\t\t\t\t\tx1: pos.tl.x,\n\t\t\t\t\t\t\ty1: pos.tl.y,\n\t\t\t\t\t\t\tx2: pos.tr.x,\n\t\t\t\t\t\t\ty2: pos.tr.y\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttiles: [tileAbove, tileBelow],\n\t\t\t\t\t\tplayer: false\n\t\t\t\t\t};\n\t\t\t\t\tid++;\n\t\t\t\t}\n\n\t\t\t\t// Vertical line\n\t\t\t\tif (y < config.height) {\n\t\t\t\t\tconst tileLeft = x > 0 ? baseNumber - 1 : false; // if not most left line\n\t\t\t\t\tconst tileRight = x < config.width ? baseNumber : false; // if not most right line\n\n\t\t\t\t\tlineData[id] = {\n\t\t\t\t\t\tid: id,\n\t\t\t\t\t\tpos: {\n\t\t\t\t\t\t\tx1: pos.tl.x,\n\t\t\t\t\t\t\ty1: pos.tl.y,\n\t\t\t\t\t\t\tx2: pos.bl.x,\n\t\t\t\t\t\t\ty2: pos.bl.y\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttiles: [tileLeft, tileRight],\n\t\t\t\t\t\tplayer: false\n\t\t\t\t\t};\n\t\t\t\t\tid++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn lineData;\n\t};\n\n\t/**\n\t * Generate Dot Data\n\t * @returns {Array}\n\t */\n\tgenerateDotData = () => {\n\t\tconst dots = [];\n\t\tlet id = 0;\n\t\t// Loop through rows\n\t\tfor (let y = 0; y <= config.height; y++) {\n\t\t\t// Loop through column\n\t\t\tfor (let x = 0; x <= config.width; x++) {\n\t\t\t\tdots[id] = {\n\t\t\t\t\tid: id,\n\t\t\t\t\tpos: {\n\t\t\t\t\t\tx: x * config.size,\n\t\t\t\t\t\ty: y * config.size,\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tid++;\n\t\t\t}\n\t\t}\n\n\t\treturn dots;\n\t};\n\n\t/**\n\t * Draw a line on mouse click\n\t * @param id\n\t */\n\tdrawLine = (id) => {\n\t\t// Retrieve state data\n\t\tconst dots = {...this.state.box.dots};\n\t\tconst game = {...this.state.game};\n\t\tconst lines = {...this.state.box.lines};\n\n\t\t// Create shorthand variables\n\t\tlet x = dots[id].pos.x;\n\t\tlet y = dots[id].pos.y;\n\t\tlet mx = game.mouseLine.x;\n\t\tlet my = game.mouseLine.y;\n\n\t\t// Show possible options in yellow dots\n\t\tlet options = utils.getPossibleOptions(lines, dots, x, y);\n\n\t\t// WHEN the 1th DOT and 2nd DOT are not identical try to find connected LINE\n\t\tlet match = false;\n\t\tif (id !== game.mouseLine.id && game.mouseLine.id !== false) {\n\n\t\t\t// Note: finding the line is a bit tricky, since we use coordinates to find them, should use ID's instead\n\t\t\t// Check if a line matches the tile\n\t\t\tmatch = _.filter(lines, function (line) {\n\t\t\t\treturn (\n\t\t\t\t\t((line.pos.x1 === x && line.pos.y1 === y) || (line.pos.x2 === x && line.pos.y2 === y)) &&\n\t\t\t\t\t((line.pos.x1 === mx && line.pos.y1 === my) || (line.pos.x2 === mx && line.pos.y2 === my))\n\t\t\t\t)\n\t\t\t});\n\t\t}\n\n\t\t// IF same dot is clicked THEN cancel current line\n\t\t// OR when line is already connected THEN also cancel current line\n\t\tif (id === game.mouseLine.id || game.mouseLine.id !== false) {\n\t\t\tid = false;\n\t\t\tx = false;\n\t\t\ty = false;\n\t\t\toptions = false;\n\t\t}\n\n\t\t// Write back new data to the mouse line\n\t\tgame.mouseLine.id = id;\n\t\tgame.mouseLine.x = x;\n\t\tgame.mouseLine.y = y;\n\t\tgame.mouseLine.options = options;\n\n\t\tthis.setState({game});\n\n\t\t// Set line after we are done, other wise 'setStates' conflicts\n\t\tif (match.length === 1) {\n\t\t\tthis.setLine(_.first(match).id);\n\t\t}\n\t};\n\n\t/**\n\t * Try to set Line\n\t * @param id\n\t */\n\tsetLine = (id) => {\n\t\t// Retrieve several states\n\t\tconst game = {...this.state.game};\n\t\tconst lines = {...this.state.box.lines};\n\t\t// Check if player is allowed to set this line\n\t\tif (lines[id].player !== false) {\n\t\t\treturn\n\t\t}\n\n\t\t// Connect a player to a line\n\t\tlines[id].player = game.currentPlayer;\n\t\tthis.setState({lines});\n\n\t\t// Check if any of the tiles from line has 4 lines connected\n\t\tlet success = false; // flag set on true when 1 or more boxes are filled\n\t\tlines[id].tiles.forEach((number) => {\n\t\t\t// When number is not a number, we are on the edge, we skip this number\n\t\t\tif (number === false) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Check if a line matches the tile\n\t\t\tlet match = _.filter(lines, function (line) {\n\t\t\t\treturn line.tiles.includes(number) && line.player !== false;\n\t\t\t});\n\n\t\t\t// When the tile has 4 lines set player to it, it could be 2 tiles\n\t\t\tif (match.length === 4) {\n\t\t\t\tthis.setBox(number, game.currentPlayer);\n\t\t\t\tsuccess = true;\n\t\t\t}\n\t\t});\n\n\t\t// If player didn't succeed, then switch to other player\n\t\tif (success !== true) {\n\t\t\tthis.switchPlayer();\n\t\t}\n\t};\n\n\t/**\n\t * Switch Player\n\t */\n\tswitchPlayer()\n\t{\n\t\tconst game = {...this.state.game};\n\n\t\t// Switch between players\n\t\tgame.currentPlayer = 1 - game.currentPlayer; // Toggle to other player\n\n\t\tthis.setState({game});\n\t}\n\n\t/**\n\t * Set Box\n\t * @param id\n\t * @param player\n\t */\n\tsetBox = (id, player) => {\n\t\tlet tiles = {...this.state.box.tiles};\n\t\ttiles[id].player = player;\n\t\tthis.setState(tiles);\n\n\t\tthis.isFinish()\n\t};\n\n\t/**\n\t * Get Line Color\n\t * @param id\n\t * @returns {string|string}\n\t */\n\tgetLineColor = (id) => {\n\t\tconst lines = {...this.state.box.lines};\n\t\tconst player = lines[id].player;\n\n\t\tif (player === false) {\n\t\t\treturn '#49453D';\n\t\t}\n\n\t\treturn this.state.players[player].color;\n\t};\n\n\t/**\n\t * Get Box Color\n\t * @param id\n\t * @returns {string|string}\n\t */\n\tgetBoxColor = (id) => {\n\t\tconst tiles = {...this.state.box.tiles};\n\t\tconst player = tiles[id].player;\n\t\tif (player === false) {\n\t\t\treturn '#6B675E';\n\t\t}\n\n\t\treturn this.state.players[player].color;\n\t};\n\n\t/**\n\t * Get Current Player Color\n\t * @returns {string}\n\t */\n\tgetCurrentPlayerColor = () => {\n\t\treturn this.state.players[this.state.game.currentPlayer].color;\n\t};\n\n\t/**\n\t * Handle mouse move\n\t */\n\thandleMouseMove = (e) => {\n\t\tconst game = {...this.state.game};\n\n\t\t// Create SVG point to capture relative mouse position within SVG component\n\t\tlet point = this.svg.createSVGPoint();\n\t\tpoint.x = e.clientX;\n\t\tpoint.y = e.clientY;\n\t\tgame.mouse = point.matrixTransform(this.svg.getScreenCTM().inverse());\n\n\t\t// Write back relative mouse position to state\n\t\tthis.setState({game});\n\t};\n\n\t/**\n\t * Get Dot option class\n\t * @description check if the current dot (id) is in the list with possible options\n\t * @param id\n\t * @returns {string}\n\t */\n\tgetDotOptionClass = (id) => {\n\t\tif (this.state.game.mouseLine.options && this.state.game.mouseLine.options.includes(id)) {\n\t\t\treturn 'active'\n\t\t}\n\n\t\treturn ''\n\t};\n\n\n\t/**\n\t * Get Player Score\n\t * @param id\n\t */\n\tgetPlayerScore = (id) => {\n\t\tconst tiles = this.state.box.tiles;\n\n\t\tlet score = _.filter(tiles, (tale) => {\n\t\t\treturn tale.player === id;\n\t\t});\n\n\t\treturn score.length;\n\t};\n\n\t/**\n\t * is Current Player\n\t * @param id\n\t * @returns {boolean}\n\t */\n\tisCurrentPlayer = (id) => {\n\t\treturn id === this.state.game.currentPlayer;\n\t};\n\n\t/**\n\t * Is the game finished?\n\t * @returns {boolean}\n\t */\n\tisFinish = () =>{\n\t\tconst tiles = this.state.box.tiles;\n\n\t\tlet playerTiles = _.filter(tiles, (tale) => {\n\t\t\treturn tale.player !== false;\n\t\t});\n\n\t\tif(tiles.length === playerTiles.length){\n\t\t\tconst game = {...this.state.game};\n\n\t\t\tif(this.getPlayerScore(0) > this.getPlayerScore(1)){\n\t\t\t\tgame.winner = 0;\n\t\t\t}else if(this.getPlayerScore(1) > this.getPlayerScore(0)) {\n\t\t\t\tgame.winner = 1;\n\t\t\t}else{\n\t\t\t\tgame.winner = enums.equal;\n\t\t\t}\n\n\t\t\tthis.setState({game});\n\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t};\n\n\n\tgetWinner = (id) =>{\n\t\tif(id===false){\n\t\t\treturn false;\n\t\t}else if(id===enums.equal){\n\t\t\treturn 'Draw!'\n\t\t}else{\n\t\t\treturn this.state.players[id].name + ' won the game!';\n\t\t}\n\t};\n\n\t/**\n\t * Render\n\t * @returns {*}\n\t */\n\trender()\n\t{\n\t\t// Draw tiles\n\t\tlet squares = this.state.box.tiles.map((tile) => {\n\t\t\tlet x = tile.pos.x * config.size;\n\t\t\tlet y = tile.pos.y * config.size;\n\n\t\t\treturn (\n\t\t\t\t<Tale key={tile.number} fill={this.getBoxColor(tile.number)} x={x} y={y} size={config.size}\n\t\t\t\t      number={tile.number}/>\n\t\t\t)\n\t\t});\n\n\t\t// Draw lines\n\t\tlet lines = this.state.box.lines.map((line) => {\n\t\t\treturn (\n\t\t\t\t<LineGroup\n\t\t\t\t\tkey={line.id}\n\t\t\t\t\tx1={line.pos.x1}\n\t\t\t\t\ty1={line.pos.y1}\n\t\t\t\t\tx2={line.pos.x2}\n\t\t\t\t\ty2={line.pos.y2}\n\t\t\t\t\tcolor={this.getLineColor(line.id)}\n\t\t\t\t\tcurrentColor={this.getCurrentPlayerColor()}\n\t\t\t\t/>\n\t\t\t);\n\t\t});\n\n\t\t// Draw dots\n\t\tlet dots = this.state.box.dots.map((dot) => {\n\t\t\treturn (\n\t\t\t\t<Dot onClick={() => this.drawLine(dot.id)} key={dot.id} cx={dot.pos.x} cy={dot.pos.y}\n\t\t\t\t     currentColor={this.getCurrentPlayerColor()} modifier={this.getDotOptionClass(dot.id)}/>\n\t\t\t);\n\t\t});\n\n\t\tlet viewportOffsetX = config.offsetX;\n\t\tlet viewportOffsetY = config.offsetY;\n\t\tlet viewportWidth = config.width * config.size + config.offsetX * -2;\n\t\tlet viewportHeight = config.height * config.size + config.offsetY * -2;\n\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<svg className={\"box\"} width=\"100%\" height=\"100vh\"\n\t\t\t\t     viewBox={`${viewportOffsetX} ${viewportOffsetY} ${viewportWidth} ${viewportHeight}`}\n\t\t\t\t     onMouseMove={(e) => this.handleMouseMove(e)}\n\t\t\t\t     ref={(svg) => this.svg = svg}>\n\t\t\t\t\t{squares}\n\t\t\t\t\t{lines}\n\t\t\t\t\t{dots}\n\n\t\t\t\t\t<MouseLine\n\t\t\t\t\t\tid={this.state.game.mouseLine.id}\n\t\t\t\t\t\tx1={this.state.game.mouseLine.x}\n\t\t\t\t\t\ty1={this.state.game.mouseLine.y}\n\t\t\t\t\t\tx2={this.state.game.mouse.x}\n\t\t\t\t\t\ty2={this.state.game.mouse.y}\n\t\t\t\t\t\tcurrentColor={this.getCurrentPlayerColor()}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<Player cx={'-100'} cy={0}\n\t\t\t\t\t        fill={this.state.players[0].color}\n\t\t\t\t\t        score={this.getPlayerScore(0)}\n\t\t\t\t\t        name={this.state.players[0].name}\n\t\t\t\t\t        currentPlayer={this.isCurrentPlayer(0)}/>\n\t\t\t\t\t<Player cx={viewportWidth - 100 * 3} cy={0}\n\t\t\t\t\t        fill={this.state.players[1].color}\n\t\t\t\t\t        score={this.getPlayerScore(1)}\n\t\t\t\t\t        name={this.state.players[1].name}\n\t\t\t\t\t        currentPlayer={this.isCurrentPlayer(1)}/>\n\n\t\t\t        <text onClick={this.restartGame} x={250} y={'90%'} dominantBaseline=\"middle\" textAnchor=\"middle\" fill=\"white\">Restart</text>\n\n\t\t\t\t\t<Winner onClick={this.restartGame} offset={viewportWidth/2} player={this.getWinner(this.state.game.winner)} />\n\t\t\t\t</svg>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './scss/index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}